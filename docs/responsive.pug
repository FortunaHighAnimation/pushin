doctype html
html
	head
		title PushIn.js - Examples: Responsive
		meta(charset='utf-8')
		meta(name='viewport' content='width=device-width, initial-scale=1')
		link( href='demo.css' rel='stylesheet' )
		style.
			.pushin-layer { padding: 0 3em; }
			.scroll-counter {
				padding: 1em;
				position: fixed;
				top: 0;
				width: 100%;
				text-align: center;
				background-color: white;
				border-bottom: 1px solid black;
			}
			.pushin {
				background-color: lightgrey;
				z-index: -1;
			}
	body
		header.demo-header
			h1.demo-padded Responsive design
			p.demo-padded
				| This example illustrates some of the responsive design features built into pushIn.js. 
				| These features can help you control the layout and behavior of the effect for each of your breakpoints,
				| giving you a great amount of flexibility.
			h2.demo-padded Why is this necessary?
			p.demo-padded
				| When there is a lot of wrapping content like paragraphs of text,
				| the page content could become longer on smaller screens like phones or tablets.
				| This could interfere with the timing of pushIn.js animations, since it relies directly 
				| on the window scroll position. This is where specifying different settings per breakpoint
				| can come in handy.
		main
			div.pushin
				div.pushin-scene
					div.pushin-layer Layer 1
					div.pushin-layer Layer 2
					div.pushin-layer Layer 3
					div.pushin-layer Layer 4
		div.scroll-counter
		footer
			ul
				li
					a(href="https://github.com/nateplusplus/pushin-js") View on github 
						include github.svg
			script( defer ).
				document.addEventListener( 'DOMContentLoaded', function() {
					pushInStart();
				} );

				var scrollCounter = document.querySelector('.scroll-counter');
				scrollCounter.innerText = 'Scroll position: ' + window.pageYOffset + 'px';

				window.addEventListener( 'scroll', function( event ) {
					scrollCounter.innerText = 'Scroll position: ' + window.pageYOffset + 'px';
				} );